
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  isOnboarding  Boolean     @default(false)
  sessions      Session[]
  accounts      Account[]
  workspaces    Workspace[]
  projects      Project[]
  feedbacks     Feedback[]
  banned        Boolean?     
  banReason     String?
  banExpires    DateTime?
  role          String      @default("user")
  normalizedEmail String    @unique

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime

  @@map("verification")
}

model Trigger {
  id            String  @id
  name          String
  email         String
  emailVerified Boolean
}

model Workspace {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invite_url String?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects   Project[]
}

model Project {
  id           String   @id @default(uuid())
  name         String  
  slug         String 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflows    Workflow[]
}

model Workflow {
  id               String         @id @default(uuid())
  name             String
  status           WorkflowStatus
  services         Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  projectId        String
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  nodes            Node[]
  edges            Edge[]
}

model Node {
  id                 String          @id @default(uuid())
  type               NodeType
  workflowId         String
  workflow           Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  position           Position?
  data               NodeData?
  connections        Connection?
}

model Connection {
  id                 String          @id @default(uuid())
  sourceOf           String[]        @default([])
  targetOf           String[]        @default([])
  nodeId             String          @unique
  node               Node            @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model Position {
  id                 String          @id @default(uuid())
  x                  Float
  y                  Float
  nodeId             String          @unique
  node               Node            @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model NodeData {
  id                 String          @id @default(uuid())
  label              String
  selected           String?
  serviceId          String?
  nodeId             String          @unique
  node               Node            @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model Edge {
  id                 String          @id @default(uuid())
  source             String
  target             String
  workflowId         String
  workflow           Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

enum NodeType {
  agentNode
  memoryNode
  serviceNode
}

enum WorkflowStatus {
  Paused
  Running
  Stopped
}

model Feedback {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  desc       String
  emotion    String
}